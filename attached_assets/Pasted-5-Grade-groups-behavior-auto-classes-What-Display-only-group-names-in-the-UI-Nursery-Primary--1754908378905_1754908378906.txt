5) Grade groups behavior (auto classes)
What: Display only group names in the UI (Nursery, Primary, Secondary, Islamiyya, Adult Learning). When a group is selected, auto-create classes for that group for the school.
How:

Maintain a mapping table (or seed data) where each grade group maps to a list of class class_id values (master classes table).

For Islamiyya and Adult Learning groups create 6 classes each (seeded).

On create/edit:

If group toggled ON → add school_classes entries for each class_id in group.

If group toggled OFF → remove school_classes entries or mark them inactive (business decision) — implement as remove for now but preserve master classes.

Create class_branches records if the school uses branches (A, B, C). Branch labels can be dynamic.
Acceptance:

The SchoolForm shows group names only.

After create, the school has school_classes rows for all classes in selected groups.

If later a group is toggled off, those school_classes are removed/disabled.

6) Branch management UI & API
What: Add Manage Branches action on each school in the Schools list.
How (UI):

Add action button Manage Branches (opens modal or page).

Show list of branches with Add / Edit / Suspend / Delete (soft delete).
How (API):

POST /api/schools/:id/branches → create

PUT /api/branches/:id → update

PATCH /api/branches/:id/status → set status = suspended | active | deleted
Acceptance:

Branch create/edit/suspend sets status accordingly.

Deleted branches (status=deleted) do not appear in frontend lists.

7) Feature toggles for a school
What: Manage Features per school via toggles.
How:

GET /api/features → retrieve all features for toggle list.

POST /api/schools/:id/features with {feature_id, enabled, price_override?} to add/update.

Toggles should immediately update the DB and UI.

If toggled ON → create school_features row; OFF → set enabled=false (or delete).
Acceptance:

Toggling ON results in school_features.enabled = true.

Toggling OFF hides feature from that school and is removed from invoice auto-calculation.

8) Soft delete for schools & global filtering
What: When user deletes a school, set status = deleted.
How:

DELETE /api/schools/:id → set status = deleted.

All GET queries to list schools must filter WHERE status != 'deleted'.

Same rule for branches and other soft-deleted entities.
Acceptance:

Deleted schools/branches are not visible in the frontend or reports.

9) Edit School (use same SchoolForm)
What: Edit opens the same SchoolForm with mode='edit' and initialData prefilled.
How:

Fetch GET /api/schools/:id including school_features, branches, and school_classes.

Allow toggling features and grade groups. Save calls PUT /api/schools/:id.

On changes to groups, create or remove school_classes accordingly inside a DB transaction.
Acceptance:

Editing persists changes, updates features toggles, updates classes and branches correctly.

10) Invoice behavior & UI (brief)
What: Invoices must:

Allow Create/Edit/Delete.

Use school-specific invoice if it exists; else fallback to default invoice template.

Allow selecting features for invoice; auto-calc price if features have price.

If no features with prices present, allow manual price entry.
How:

POST /api/invoices create invoice, PUT /api/invoices/:id, DELETE /api/invoices/:id.

When user clicks Generate Invoice from school list:

Check: if school has invoice template (invoices or school_invoice_template), use it. Else use settings.default_invoice_template.

Create final invoice PDF (server-side render or HTML->PDF library).

Email invoice to school email with SMTP (Nodemailer).
Acceptance:

Generate invoice uses school-specific or default template and sends email.

Invoices show pricing breakdown (feature price vs negotiated override).

11) UI consistency: Schools list & Dashboard list
What: Make Schools page list identical to Dashboard schools list. Reuse the same SchoolsTable component.
How:

Move the table into components/SchoolsTable.jsx and import in both places.

Ensure columns, action buttons and styles match exactly.
Acceptance:

Schools list looks and behaves identically on Dashboard and Schools page.

12) Hide deleted for frontend and data fetch rules
What: Everywhere in the frontend fetches should exclude status = deleted.
How:

Backend default filters for lists: WHERE status != 'deleted'.

Frontend does not perform extra checks; rely on API results.
Acceptance:

No deleted items ever appear in UI.

13) Testing & acceptance checklist (run after implementation)
For each item below, run and confirm:

Create school from Dashboard SchoolForm:

Preview link updates when short_name typed.

After submit, DB has schools row, school_classes created, school_features rows when toggled.

Welcome email delivered to both emails.

Open Schools page:

Uses same SchoolForm for edit.

Table identical to Dashboard.

Branch management:

Add/Edit/Suspend/Delete (soft) works; deleted branch hidden.

Feature toggles:

Toggle a feature ON/OFF for a specific school and invoice price calculation reflects changes.

Grade groups:

Selecting Nursery adds nursery classes (IDs).

Selecting Islamiyya adds 6 classes.

Invoice:

Create invoice selecting features with prices auto-calc.

If no priced features, allow manual price entry.

Generate invoice uses default or school template correctly and emails PDF.

Soft delete:

Delete a school → status=deleted; it does not show in lists; related data preserved.

14) Helpful implementation notes & small code hints
Keep short_name uniqueness enforced at DB level (unique index on short_name + domain).

Use school_id foreign keys on all school-specific tables.

When creating classes under groups, always store school_classes referencing class_id (master).

Use background job or immediate send for emails depending on scale; for now send synchronously on create (or enqueue if worker exists).

Use explicit status values: active, suspended, deleted.